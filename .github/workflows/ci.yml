on:
  push:
    branches: [ master, R ]
  pull_request:
    branches: [ master, R ]

name: build

jobs:
  build:

    # Need latest ubuntu for postgresql service container; see
    # https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-postgresql-service-containers
    runs-on: ubuntu-latest

    env:
      R_LIBS_USER: ${{ github.workspace }}/RLibs

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgis/postgis:11-2.5
        # Provide the password for postgres
        env:
            POSTGRES_PASSWORD: postgres
            POSTGRES_DB: network_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:

    - name: Test postgres setup
      run: |
        psql -U postgres -c 'select version();'
      env:
        PGHOST: localhost
        PGPASSWORD: postgres
        PGPORT: 5432

    - name: Install required packages
      run: |
        sudo apt update
        sudo apt-get install libudunits2-dev libgdal-dev gdal-bin

    - name: Clone agentsoz/matsim-melbourne
      uses: actions/checkout@v2
      with:
        repository: agentsoz/matsim-melbourne
        path: matsim-melbourne
        ref: R

    - name: Setup dirs and permissions for installing R packages
      run: |
        mkdir -p $R_LIBS_USER
        sudo chown -R $USER:$USER $GITHUB_WORKSPACE/matsim-melbourne
        sudo chown -R $USER:$USER $R_LIBS_USER

    - name: Cache R packages
      uses: actions/cache@v2
      id: cache-packrat
      env:
        cache-name: cache-packrat-lib
      with:
        path: |
          ${{ github.workspace }}/matsim-melbourne/packrat/lib
          ${{ github.workspace }}/matsim-melbourne/demand/data
          ${{ github.workspace }}/matsim-melbourne/network/data
        key: ${{ runner.os }}-build-${{ env.cache-name }}-1-${{ hashFiles('**/packrat.lock') }}-${{ hashFiles('**/prepare.sh') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-1-

    - name: Get demand data
      if: steps.cache-packrat.outputs.cache-hit != 'true'
      working-directory: matsim-melbourne/demand/data
      run: git checkout prepare.sh && ./prepare.sh

    - name: Get network data
      if: steps.cache-packrat.outputs.cache-hit != 'true'
      working-directory: matsim-melbourne/network/data
      run: git checkout prepare.sh && ./prepare.sh -test

    - name: Install packrat and project dependencies
      if: steps.cache-packrat.outputs.cache-hit != 'true'
      working-directory: matsim-melbourne
      shell: Rscript {0}
      run: |
        version
        install.packages('packrat')
        library(packrat)
        packrat::restore()

    - name: Test OSM processing for network generation
      working-directory: matsim-melbourne/network
      run: ./processOSM.sh
      env:
        PGHOST: localhost
        PGPASSWORD: postgres
        PGPORT: 5432

    - name: Test MATSim network generation
      working-directory: matsim-melbourne
      shell: Rscript {0}
      run: |
        library(sf)
        setwd('./network')
        source("MATSimNetworkGenerator.R")
        makeMatsimNetwork(F,20,F,F,F,F,T)

    # - name: Test MATSim network generation
    #   working-directory: matsim-melbourne
    #   shell: Rscript {0}
    #   run: |
    #     library(testthat)
    #     testthat::test_dir("./network/tests/testthat", stop_on_failure = TRUE)

    - name: Test demand generation
      working-directory: matsim-melbourne
      shell: Rscript {0}
      run: |
        library(data.table) # fixme: loads only if in repo root dir
        setwd('./demand')
        source('makeExamplePopulation.R')
        runtest()
